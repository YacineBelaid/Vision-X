(self.webpackChunkmp_webgl=self.webpackChunkmp_webgl||[]).push([[710],{710:(e,t,s)=>{"use strict";s.r(t),s.d(t,{AcceptMessage:()=>P,AcceptObserver:()=>E,ConnectMessage:()=>O,ConnectMessageObserver:()=>S,HandshakeMessage:()=>A,HandshakeObserver:()=>C,IncomingMessageType:()=>w,MP_SDK:()=>f,OutgoingMessageType:()=>p,RejectMessage:()=>D,RejectObserver:()=>I,connect:()=>M,version:()=>k});class n{constructor(e){this.messageReceiver=e}notify(e,t){this.messageReceiver.onMessageReceived(e,t)}}class r{constructor(){this.values={}}add(e,t){this.getValuesAtKey(e).push(t)}remove(e,t){const s=this.values[e];if(s){const e=s.indexOf(t);e>-1&&s.splice(e,1)}}removeKey(e){delete this.values[e]}getValuesAtKey(e){const t=this.values[e]||[];return this.values[e]=t,t}valuesPerKey(e){return this.getValuesAtKey(e).length}find(e,t){return this.values[e]&&this.values[e].find(t)}get keys(){return Object.keys(this.values)}hasKey(e){return e in this.values}has(e,t){return this.hasKey(e)&&this.values[e].includes(t)}*[Symbol.iterator](){for(const e in this.values)for(const t of this.values[e])yield[e,t]}}class i{listen(){}stopListening(){}send(){throw Error("The sdk has been disconnected and can't make any new calls")}}class o{constructor(e,t,s){this.sourceId=e,this.targetId=t,this.messageBridge=s,this.observers=new r}static toFilteredMessenger(e,t,s){const n=new c(e.sourceId,e.targetId,e,t);for(const t of s)for(const s of e.observers.getValuesAtKey(t))n.addObserver(s);return n}init(){const e=new class{constructor(e){this.messenger=e}onMessageReceived(e,t){this.messenger.onMessageReceived(e,t)}}(this),t=new n(e);this.messageBridge.listen(t)}dispose(){this.messageBridge.stopListening(),this.messageBridge=new i}addObserver(e){this.observers.add(e.messageType,e)}removeObserver(e){this.observers.remove(e.messageType,e)}send(e){const t=this.sourceId,s=this.targetId;this.messageBridge.send(Object.assign(Object.assign({},e),{fromId:t,toId:s,timestamp:Date.now()}))}onMessageReceived(e,t){if(!this.filterMessageId(e))return;const s=e.type,n=this.observers.getValuesAtKey(s);if(n)for(const s of n){const n=e.payload||e;s.notify(n,t,e.timestamp)}}filterMessageId(e){const t=e.toId,s=e.fromId;return t instanceof Array?t.indexOf(this.sourceId)>-1:(void 0===t||t===this.sourceId)&&s===this.targetId}}class c extends o{constructor(e,t,s,n){super(e,t,new i),this.messenger=s,this.sendFilter=n,this.errorBridge=new i}send(e){this.sendFilter.includes(e.type)?this.messenger.send(e):this.errorBridge.send()}}class a{constructor(e,t){this.sourceId=e,this.listenerBridge=t,this.observers=new r}init(){const e=new class{constructor(e){this.messenger=e}onMessageReceived(e,t){this.messenger.onMessageReceived(e,t)}}(this),t=new n(e);this.listenerBridge.listen(t)}dispose(){this.listenerBridge.stopListening()}addObserver(e){this.observers.add(e.messageType,e)}removeObserver(e){this.observers.remove(e.messageType,e)}send(e,t,s,n){s.send(Object.assign(Object.assign({},e),{fromId:this.sourceId,toId:t,timestamp:Date.now()}),n)}onMessageReceived(e,t){const s=e.type,n=this.observers.getValuesAtKey(s);if(n)for(const s of n){const n=e.payload||e;s.notify(n,t,e.timestamp)}}}class h{constructor(e){this.targetWindow=e,this.messageObserver=null,this.onMessage=e=>{if(this.messageObserver){const t=e.data;this.messageObserver.notify(Object.assign({},t),{id:t.fromId,origin:e.origin,source:e.source},e.data.timestamp)}}}listen(e){this.messageObserver||(this.messageObserver=e,this.targetWindow.addEventListener("message",this.onMessage))}stopListening(){this.targetWindow.removeEventListener("message",this.onMessage),this.messageObserver=null}}class d{constructor(e,t="*"){this.targetWindow=e,this.targetOrigin=t}send(e,t){this.targetWindow.postMessage(e,this.targetOrigin)}}class l{constructor(e,t,s="*"){this.sourceWindow=e,this.listener=new h(e),this.sender=new d(t,s)}listen(e){this.listener.listen(e)}stopListening(){this.listener.stopListening()}send(e){this.sender.send(e,this.sourceWindow)}}class u{constructor(e,t,s,n,r="*"){this.sourceId=e,this.sourceWindow=t,this.targetId=s,this.targetWindow=n,this.targetOrigin=r}createMessenger(){const e=new l(this.sourceWindow,this.targetWindow,this.targetOrigin);return new o(this.sourceId,this.targetId,e)}}var g=function(e,t,s,n){return new(s||(s=Promise))((function(r,i){function o(e){try{a(n.next(e))}catch(e){i(e)}}function c(e){try{a(n.throw(e))}catch(e){i(e)}}function a(e){var t;e.done?r(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};class v{constructor(){this.libraryCache=new Map}load(e,t){const s=this.libraryCache.get(e)||new m(e,t);return this.libraryCache.set(e,s),s.library}}class m{constructor(e,t){this._libraryPromise=new Promise(((e,t)=>{this.libraryResolver=e,this.libraryRejecter=t})),this.fetch(e,t)}fetch(e,t){return g(this,void 0,void 0,(function*(){let s;try{const t=new Request(e),n=new URL(t.url);if(!n.hostname.endsWith(window.location.hostname)&&!n.host.endsWith("matterport.com")&&!n.host.endsWith("matterportvr.cn"))return void this.libraryRejecter(`Request made for ${n.href} does not have the same origin as the request origin ${window.location.origin}`);s=yield fetch(new Request(e,{}))}catch(e){return void this.libraryRejecter(e)}if(!s.ok)return void this.libraryRejecter("Script not found.");const n={},r=yield s.text();if(new Function(r).call(n),t&&t in window){const e=window[t]||{};Object.assign(n,e),delete window[t]}this.libraryResolver(n)}))}get library(){return this._libraryPromise}}var f,p,w,y,b=function(e,t,s,n){return new(s||(s=Promise))((function(r,i){function o(e){try{a(n.next(e))}catch(e){i(e)}}function c(e){try{a(n.throw(e))}catch(e){i(e)}}function a(e){var t;e.done?r(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};!function(e){const t=new v;e.connect=function(e,s,n){return b(this,void 0,void 0,(function*(){let r;try{r=yield e.connect()}finally{e.cancelConnecting()}const i=yield function(e){return b(this,void 0,void 0,(function*(){if(!e)throw new Error("Unabled to load the sdk");try{const s=yield t.load(e,"sdk-client");if(s&&s.SdkBuilder&&"function"==typeof s.SdkBuilder)return s.SdkBuilder}catch(e){}throw Error(`Could not load the sdk from ${e}`)}))}(r.scriptUrl),o=s.getFactory(r);return function(e,t,s,n){return new t(s,e).build(n)}(n,i,o,r.serializedInterface)}))}}(f||(f={})),function(e){e.CONNECT="postmessage.connect"}(p||(p={})),function(e){e.HANDSHAKE="postmessage.handshake",e.ACCEPT="postmessage.accept",e.REJECT="postmessage.reject"}(w||(w={}));class O{constructor(e,t={}){this.type=p.CONNECT,this.payload={bootstrapVersion:e,options:{auth:t.auth,provider:t.provider,sdkType:t.sdkType}}}}class C{constructor(e){this.receiver=e,this.messageType=w.HANDSHAKE}notify(e,t,s){this.receiver.handshake()}}class E{constructor(e){this.receiver=e,this.messageType=w.ACCEPT}notify(e,t,s){const{sourceId:n,scriptUrl:r,targetId:i,targetOrigin:o}=e,c=e.interface;this.receiver.accept(n,r,c,i,o)}}class I{constructor(e){this.receiver=e,this.messageType=w.REJECT}notify(e,t,s){this.receiver.reject(e.reason)}}!function(e){e[e.IDLE=0]="IDLE",e[e.CONNECTING=1]="CONNECTING",e[e.HANDSHAKE=2]="HANDSHAKE",e[e.CONNECTED=3]="CONNECTED",e[e.REJECTED=4]="REJECTED"}(y||(y={}));class N{constructor(e,t,s){this.messenger=e,this.target=t,this.source=s,this.connectionState=y.IDLE,this.connectionPoll=void 0;const n=new class{constructor(e){this.connector=e}handshake(){this.connector.handshake()}accept(e,t,s,n,r){this.connector.accept(e,t,s,n,r)}reject(e){this.connector.reject(e)}}(this);this.handshakeObserver=new C(n),this.acceptObserver=new E(n),this.rejectObserver=new I(n),this.connectionPromise=new Promise(((e,t)=>{this.resolveConnection=e,this.rejectConnection=t}))}connect(e,t={}){return this.connectionState===y.IDLE&&(this.connectionState=y.CONNECTING,this.messenger.addObserver(this.handshakeObserver),this.messenger.addObserver(this.acceptObserver),this.messenger.addObserver(this.rejectObserver),this.connectionPoll=window.setInterval((()=>{this.messenger.send(new O(e,t),-1,this.target,this.source)}),500)),this.connectionPromise}cancelConnecting(){this.connectionState<y.CONNECTED&&(this.stopConnectPolling(),this.rejectConnection("User manually cancelled connection"))}handshake(){this.connectionState<y.HANDSHAKE&&(this.connectionState=y.HANDSHAKE,this.stopConnectPolling(),this.messenger.removeObserver(this.handshakeObserver))}accept(e,t,s,n,r){this.connectionState<y.CONNECTED&&(this.connectionState=y.CONNECTED,this.messenger.removeObserver(this.handshakeObserver),this.messenger.removeObserver(this.acceptObserver),this.messenger.removeObserver(this.rejectObserver),this.stopConnectPolling(),this.resolveConnection({sourceId:e,targetId:n,targetOrigin:r,scriptUrl:t,serializedInterface:s}))}reject(e){this.connectionState<y.CONNECTED&&(this.connectionState=y.REJECTED,this.messenger.removeObserver(this.handshakeObserver),this.messenger.removeObserver(this.acceptObserver),this.messenger.removeObserver(this.rejectObserver),this.stopConnectPolling(),this.rejectConnection(e))}stopConnectPolling(){clearInterval(this.connectionPoll),this.connectionPoll=void 0}}var T=function(e,t,s,n){return new(s||(s=Promise))((function(r,i){function o(e){try{a(n.next(e))}catch(e){i(e)}}function c(e){try{a(n.throw(e))}catch(e){i(e)}}function a(e){var t;e.done?r(e.value):(t=e.value,t instanceof s?t:new s((function(e){e(t)}))).then(o,c)}a((n=n.apply(e,t||[])).next())}))};const k="3.0";function M(e,t={}){return T(this,void 0,void 0,(function*(){const s=(n=e).contentWindow?n.contentWindow:null;var n;if(!s)return Promise.reject("invalid window");const r=Math.floor(1e6*Math.random()),i=new h(window),o=new d(s),c=new a(r,i);c.init();const l=new N(c,o,window);return f.connect(new R(l,c,t),new j(s),window)}))}class R{constructor(e,t,s){this.connector=e,this.postMessage=t,this.options=s}connect(){return this.connector.connect(k,this.options)}cancelConnecting(){this.postMessage.dispose()}}class j{constructor(e){this.target=e}getFactory(e){return new u(e.sourceId,window,e.targetId,this.target,e.targetOrigin)}}class A{constructor(){this.type=w.HANDSHAKE,this.payload={}}}class P{constructor(e,t,s,n,r){this.type=w.ACCEPT,this.payload={scriptUrl:e,interface:t,sourceId:s,targetId:n,targetOrigin:r},this.interface=t}}class D{constructor(e){this.type=w.REJECT,this.payload={reason:e},this.reason=e}}class S{constructor(e){this.receiver=e,this.messageType=p.CONNECT}notify(e,t){this.receiver.onConnectionReceived(e,t)}}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,